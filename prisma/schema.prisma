generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  telegramId           String                @unique
  username             String?
  isBaned              Boolean               @default(false)
  isVerified           Boolean               @default(false)
  createdAt            DateTime              @default(now())
  inviterRefCode       String?
  refCode              String
  role                 UserRole              @default(creator)
  balance              Decimal               @default(0)
  isSended             Boolean               @default(false)
  wasOpened            Boolean               @default(false)
  
  AutoTaskClaims       AutoTaskClaims[]
  AutoTaskApplication  AutoTaskApplication[]

  events               Event[]
  Notification         Notification[]
  ProgressProject      ProgressProject[]
  projects             Project[]
  transactionsSent     Transaction[]         @relation("FromUser")
  transactionsReceived Transaction[]         @relation("ToUser")
  undelitableMessages  UndelitableMessage[]
  userInfo             UserInfo?
  MetaTag              MetaTag[]
  tasks                Task[]                @relation("TaskToUser")

  @@map("users")
}

model UserInfo {
  id               Int     @id @default(autoincrement())
  userId           Int     @unique
  name             String?
  phoneNumber      String?
  email            String?
  tonWalletAddress String?
  user             User    @relation(fields: [userId], references: [id])
}

model Project {
  id              Int               @id @default(autoincrement())
  authorId        Int
  title           String
  description     String
  bannerUrl       String?
  files           Json?
  tags            String[]
  category        String
  status          ProjectStatus     @default(draft)
  events          Event[]
  ProgressProject ProgressProject[]
  author          User              @relation(fields: [authorId], references: [id])
  tasks           ProjectTask[]
  subtasks        Task[]            @relation("ProjectToTask")
}

model Task {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  price       Decimal
  projects    ProjectTask[]
  Project     Project[]     @relation("ProjectToTask")
  User        User[]        @relation("TaskToUser")
}

model AutoTask {
  id                  Int                   @id @default(autoincrement())
  title               String?
  description         String?
  reward              Decimal
  url                 String?
  createdAt           DateTime              @default(now())
  taskType            AutoTaskType          @default(CUSTOM)
  verificationMethod  VerificationMethod    @default(NONE)
  categoryId          Int?
  AutoTaskCategory    AutoTaskCategory?     @relation(fields: [categoryId], references: [id])
  autoTaskApplication AutoTaskApplication[]
}

model ProjectTask {
  projectId Int
  taskId    Int
  project   Project @relation(fields: [projectId], references: [id])
  task      Task    @relation(fields: [taskId], references: [id])

  @@id([projectId, taskId])
  @@map("project_task")
}

model UndelitableMessage {
  message_id String @id
  userId     String
  user       User   @relation(fields: [userId], references: [telegramId])
}

model Transaction {
  id         Int             @id @default(autoincrement())
  projectId  Int?
  taskId     Int?
  fromUserId Int?
  toUserId   Int
  amount     Decimal
  createdAt  DateTime        @default(now())
  type       TransactionType @default(PAYMENT)
  fromUser   User?           @relation("FromUser", fields: [fromUserId], references: [id])
  toUser     User            @relation("ToUser", fields: [toUserId], references: [id])
}

model ProgressProject {
  id        Int            @id @default(autoincrement())
  userId    Int
  projectId Int
  status    ProgressStatus @default(pending)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  events    Event[]
  project   Project        @relation(fields: [projectId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Event {
  id                Int              @id @default(autoincrement())
  projectId         Int
  progressProjectId Int?
  userId            Int
  role              UserRole
  eventType         EventType
  description       String?
  createdAt         DateTime         @default(now())
  details           Json?
  message           String?
  progressProject   ProgressProject? @relation(fields: [progressProjectId], references: [id])
  Project           Project          @relation(fields: [projectId], references: [id])
  User              User             @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model MetaTag {
  id        Int      @id @default(autoincrement())
  tag       String
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "userId_idx")
  @@map("meta_tags")
}

model UserAdmin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model AutoTaskApplication {
  id              Int       @id @default(autoincrement())
  userId          Int
  taskId          Int
  isConfirmed     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  lastCompletedAt DateTime?
  task            AutoTask  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
}


model AutoTaskClaims {
  id              Int       @id @default(autoincrement())
  userId          Int
  taskName        String
  isConfirmed     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  lastCompletedAt DateTime?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskName])
}


model AdminActionLog {
  id         Int      @id @default(autoincrement())
  action     String
  entityType String
  entityId   Int
  oldData    Json?
  newData    Json?
  adminId    Int
  createdAt  DateTime @default(now())
}

model Notification {
  id           Int                @id @default(autoincrement())
  userId       String
  message      String
  scheduledFor DateTime?
  status       NotificationStatus @default(PENDING)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  user         User               @relation(fields: [userId], references: [telegramId])
}

model AutoTaskCategory {
  id        Int          @id @default(autoincrement())
  name      String
  type      AutoTaskType
  createdAt DateTime     @default(now())
  updatedAt DateTime
  AutoTask  AutoTask[]

  @@unique([name, type])
}

enum UserRole {
  creator
  advertiser
}

enum ProjectStatus {
  draft
  moderation
  published
  not_accepted
  closed
}

enum TransactionType {
  PAYMENT
  DEPOSIT
  WITHDRAWAL
  SYSTEM
  REFERAL
}

enum ProgressStatus {
  pending
  accepted
  rejected
}

enum EventType {
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_DELETED
  APPLICATION_SUBMITTED
  APPLICATION_APPROVED
  APPLICATION_REJECTED
  TASK_SUBMIT
  TASK_REJECTED
  TASK_COMPLETED
  TASK_UPDATED
  TRANSACTION_COMPLETED
  DISPUTE_OPENED
  DISPUTE_RESOLVED
  USER_MESSAGE
  RATING_GIVEN
}

enum NotificationStatus {
  PENDING
  SENT
  ERRORED
}

enum AutoTaskType {
  DAILY_CHECK
  WELCOME_BONUS
  CUSTOM
  WALLET_CONNECT
  
//   CHECKIN
// WELCOME_BONUS
// SHERE_IN_STORIES
// ACCOUNT_BIO
// WEB_URL
// OPEN_X
// OPEN_TG
// OPEN_YOUTUBE
// OPEN_TIKTOK
// OPEN_REDDIT
// OPEN_DISCORD
// OPEN_WHITEPAPER
// OPEN_PITCHDEK
}

enum VerificationMethod {
  NONE
  DAILY_CHECK
  WALLET_VERIFICATION
  WELCOME
}
