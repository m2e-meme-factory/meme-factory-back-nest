generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum UserRole {
  creator
  advertiser
}

enum ProjectStatus {
  draft
  moderation
  published
  not_accepted
  closed
}

model User {
  id                  Int                  @id @default(autoincrement())
  telegramId          String               @unique
  username            String?
  isBaned             Boolean              @default(false)
  isVerified          Boolean              @default(false)
  createdAt           DateTime             @default(now())
  inviterRefCode      String?
  refCode             String
  tasks               Task[]
  undelitableMessages UndelitableMessage[]
  userInfo            UserInfo?
  projects            Project[]
  role                UserRole             @default(creator)
  Application         Application[]
  TaskResponse        TaskResponse[]
  Event               Event[]
}

model UserInfo {
  id          Int    @id @default(autoincrement())
  userId      String @unique
  name        String
  phoneNumber String
  email       String
  user        User   @relation(fields: [userId], references: [telegramId])
}

model Project {
  id          Int           @id @default(autoincrement())
  authorId    Int
  title       String
  description String
  bannerUrl   String?
  files       Json?
  tags        String[]
  category    String
  subtasks    Task[]
  price       Float
  author      User          @relation(fields: [authorId], references: [id])
  tasks       ProjectTask[]
  status      ProjectStatus @default(draft)
  Application Application[]

  Event Event[]
}

model Task {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  price       Float
  projects    ProjectTask[]

  User User[]

  Project      Project[]
  TaskResponse TaskResponse[]
}

model ProjectTask {
  projectId Int
  taskId    Int
  project   Project @relation(fields: [projectId], references: [id])
  task      Task    @relation(fields: [taskId], references: [id])

  @@id([projectId, taskId])
  @@map("project_task")
}

model UndelitableMessage {
  message_id String @id
  userId     String
  user       User   @relation(fields: [userId], references: [telegramId])
}

model Transaction {
  id         Int      @id @default(autoincrement())
  projectId  Int
  taskId     Int
  fromUserId Int
  toUserId   Int
  amount     Float
  createdAt  DateTime @default(now())
}

model Application {
  id        Int               @id @default(autoincrement())
  userId    Int
  projectId Int
  status    ApplicationStatus @default(pending)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

enum ApplicationStatus {
  pending
  accepted
  rejected
}

model TaskResponse {
  id        Int            @id @default(autoincrement())
  userId    Int
  taskId    Int
  status    ResponseStatus @default(pending)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId])
}

enum ResponseStatus {
  pending
  accepted
  rejected
}

model Event {
  id          Int       @id @default(autoincrement())
  projectId   Int
  userId      Int
  role        UserRole
  eventType   EventType
  description String?
  createdAt   DateTime  @default(now())
  details     Json? // Stores transactionId, message, amount, subtaskId
  Project     Project   @relation(fields: [projectId], references: [id])
  User        User      @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

enum EventType {
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_DELETED
  APPLICATION_SUBMITTED
  APPLICATION_APPROVED
  APPLICATION_REJECTED
  TASK_COMPLETED
  TASK_UPDATED
  TRANSACTION_COMPLETED
  DISPUTE_OPENED
  DISPUTE_RESOLVED
  USER_MESSAGE
  RATING_GIVEN
}
